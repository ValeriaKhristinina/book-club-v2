generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Meeting {
  id           Int                   @id(map: "idx_28700_PRIMARY") @default(autoincrement())
  created_at   DateTime              @default(now()) @db.Timestamptz(6)
  date         DateTime              @db.Timestamptz(6)
  title        String                @db.VarChar(191)
  author       String                @db.VarChar(191)
  cover        String?               @db.VarChar(191)
  chosenById   Int?
  isComplete   Boolean
  chosenBy     Member?               @relation("MeetingChosenBy", fields: [chosenById], references: [id])
  participants MeetingParticipants[]
}

model Member {
  id             Int                   @id(map: "idx_28711_PRIMARY") @default(autoincrement())
  created_at     DateTime              @default(now()) @db.Timestamptz(6)
  firstName      String                @db.VarChar(191)
  lastName       String                @db.VarChar(191)
  joinDate       DateTime              @db.Timestamptz(6)
  exitDate       DateTime?             @db.Timestamptz(6)
  meetings       MeetingParticipants[]
  chosenMeetings Meeting[]             @relation("MeetingChosenBy")

  @@map("Member")
}

model MeetingParticipants {
  meetingId     Int
  participantId Int
  rating        Int?
  isVisited     Boolean
  meeting       Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  participant   Member  @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@id([meetingId, participantId], map: "idx_28707_PRIMARY")
  @@map("MeetingParticipants")
}
